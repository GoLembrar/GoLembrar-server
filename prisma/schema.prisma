// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id @default(uuid())
  email           String            @unique @db.VarChar(128)
  password        String            @db.VarChar(128)
  name            String?           @db.VarChar(255)
  reminder        Reminders[]
  usersToReminder UsersToReminder[]
  categories      Category[]
  contacts        Contact[]
  emails          Emails[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Reminders {
  id              String            @id @default(uuid())
  title           String            @db.VarChar(128)
  description     String
  platform        String            @db.VarChar(12)
  scheduled       DateTime
  isActivated     Boolean           @default(true)
  owner           Users             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int
  ownerId         String
  usersToReminder UsersToReminder[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([title])
}

model UsersToReminder {
  id         Int       @id @default(autoincrement())
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  platform   Platform
  reminder   Reminders @relation(fields: [reminderId], references: [id])
  reminderId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(64)
  reminders Reminders[]
  users     Users       @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Contact {
  id       String   @id @default(uuid())
  name     String   @db.VarChar(128)
  identify String   @db.VarChar(64)
  platform Platform
  user     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  favorite Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name, identify])
  @@map("contacts")
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

model Emails {
  id      Int         @id @default(autoincrement())
  ownerId String
  owner   Users       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  from    String      @db.VarChar(128)
  to      String      @db.VarChar(128)
  subject String      @db.VarChar(200)
  html    String      @db.Text
  dueDate DateTime
  status  EmailStatus @default(PENDING)
}

enum Platform {
  WHATSAPP
  TELEGRAM
  DISCORD
  EMAIL
}
