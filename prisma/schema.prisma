generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique @db.VarChar(128)
  password  String     @db.VarChar(128)
  name      String?    @db.VarChar(255)
  reminder  Reminder[]
  contacts  Contact[]
  emails    Email[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Reminder {
  id              String            @id @default(uuid())
  title           String            @db.VarChar(128)
  description     String            @db.VarChar(512)
  scheduled       DateTime
  isActivated     Boolean           @default(true)
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String
  usersToReminder UsersToReminder[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([title])
  @@map("reminders")
}

model UsersToReminder {
  id         Int      @id @default(autoincrement())
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminder   Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reminderId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  contactId  String

  @@map("users_to_reminders")
}

model Contact {
  id              String            @id @default(uuid())
  name            String            @db.VarChar(128)
  identify        String            @db.VarChar(64)
  channel         Channel
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  favorite        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UsersToReminder UsersToReminder[]

  @@unique([userId, name, identify])
  @@map("contacts")
}

enum Channel {
  WHATSAPP
  TELEGRAM
  DISCORD
  EMAIL
}

// model WHatsapp {
//  phone
//}

//model Telegram {
//  phone
//}

//model Discord {
//  phone
//}
model Email {
  id        Int      @id @default(autoincrement())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  from      String   @db.VarChar(128) // NO FUTURO O USAUIRIO PODERA USAR O PROPRIO EMAIL DELE COMO SENDER
  to        String   @db.VarChar(128) // QUEM RECEBE O EMAIL
  subject   String?  @db.VarChar(200) // PRECISA COLOCAR COMO PARAMETRO OPICIONAL
  html      String?  @db.Text // PRECISA COLOCAR COMO PARAMETRO OPICIONAL
  scheduled DateTime
  status    Status   @default(PENDING)

  @@map("emails")
}

enum Status {
  PENDING
  SENT
  FAILED
}
